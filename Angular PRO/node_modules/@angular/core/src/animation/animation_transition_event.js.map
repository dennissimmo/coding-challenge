{"version":3,"file":"animation_transition_event.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_transition_event.ts"],"names":[],"mappings":"OAOO,EAAC,UAAU,EAAC,MAAM,uBAAuB;AAChD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IAOA;;OAEG;IACH,kCAAY,EAOT;YAPU,wBAAS,EAAE,oBAAO,EAAE,wBAAS,EAAE,wBAAS,EAAE,oBAAO,EAAE,4BAAW;QAQvE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IACH,+BAAC;AAAD,CAAC,AAzBD,IAyBC;AAED;IACA,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3C,gBAAgB;IAChB,wBAAwB,CAAC,SAAS,CAAC,WAAW,CAAC;AAC/C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef} from '../linker/element_ref';\n/**\n * An instance of this class is returned as an event parameter when an animation\n * callback is captured for an animation either during the start or done phase.\n * \n * ```typescript\n * \\@Component({ \n *   host: {\n *     '[\\@myAnimationTrigger]': 'someExpression',\n *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n *   },\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *        // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   someExpression: any = false;\n *   captureStartEvent(event: AnimationTransitionEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * \n *   captureDoneEvent(event: AnimationTransitionEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * }\n * ```\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationTransitionEvent {\npublic fromState: string;\npublic toState: string;\npublic totalTime: number;\npublic phaseName: string;\npublic element: ElementRef;\npublic triggerName: string;\n/**\n * @param {?} __0\n */\nconstructor({fromState, toState, totalTime, phaseName, element, triggerName}: {\n    fromState: string,\n    toState: string,\n    totalTime: number,\n    phaseName: string,\n    element: any,\n    triggerName: string\n  }) {\n    this.fromState = fromState;\n    this.toState = toState;\n    this.totalTime = totalTime;\n    this.phaseName = phaseName;\n    this.element = new ElementRef(element);\n    this.triggerName = triggerName;\n  }\n}\n\nfunction AnimationTransitionEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTransitionEvent.prototype.fromState;\n/** @type {?} */\nAnimationTransitionEvent.prototype.toState;\n/** @type {?} */\nAnimationTransitionEvent.prototype.totalTime;\n/** @type {?} */\nAnimationTransitionEvent.prototype.phaseName;\n/** @type {?} */\nAnimationTransitionEvent.prototype.element;\n/** @type {?} */\nAnimationTransitionEvent.prototype.triggerName;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}