{"version":3,"file":"application_tokens.js","sourceRoot":"","sources":["../../../../modules/@angular/core/src/application_tokens.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,cAAc,EAAC,MAAM,MAAM;AAInC;;;;;;;;;GASG;AACH,OAAO,IAAM,gBAAgB,CAAC,MAAM,GAAG,IAAI,cAAc,CAAS,OAAO,CAAC,CAAC;AAC3E;;GAEG;AACH;IACE,MAAM,CAAC,KAAG,WAAW,EAAE,GAAG,WAAW,EAAE,GAAG,WAAW,EAAI,CAAC;AAC5D,CAAC;AAED;;;GAGG;AACH,OAAO,IAAM,gBAAgB,CAAC,sBAAsB,GAAG;IACrD,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,2BAA2B;IACvC,IAAI,EAAE,gBAAgB,CAAA,CAAU,EAAG,CAAC;CACrC,CAAC;AACF;;GAEG;AACH;IACE,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAClE,CAAC;AAED;;;GAGG;AACH,OAAO,IAAM,gBAAgB,CAAC,oBAAoB,GAAG,IAAI,cAAc,CAAoB,sBAAsB,CAAC,CAAC;AAEnH;;;;;;;GAOG;AACH,OAAO,IAAM,gBAAgB,CAAC,sBAAsB,GAChD,IAAI,cAAc,CAA8C,sBAAsB,CAAC,CAAC;AAE5F;;;GAGG;AACH,OAAO,IAAM,gBAAgB,CAAC,gBAAgB,GAAG,IAAI,cAAc,CAAS,+BAA+B,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @experimental\n */\nexport const /** @type {?} */ APP_ID = new InjectionToken<string>('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @experimental\n */\nexport const /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: /** @type {?} */(( <any[]>[])),\n};\n/**\n * @return {?}\n */\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that will be executed when a platform is initialized.\n * @experimental\n */\nexport const /** @type {?} */ PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @experimental\n */\nexport const /** @type {?} */ APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A token which indicates the root directory of the application\n * @experimental\n */\nexport const /** @type {?} */ PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}