{"version":3,"file":"path_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/path_util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;;GAGG;AACH;IAAA;IAyBA,CAAC;IAxBD;;;;;;;OAOG;IACH,6CAAoB,GAApB,UAAqB,gBAAwB,EAAE,kBAA0B,IAAG,CAAC;IAC7E;;;;;;OAMG;IACH,oCAAW,GAAX,UAAY,MAAoB,IAAG,CAAC;IACpC;;;;;OAKG;IACH,qCAAY,GAAZ,UAAa,MAAoB,IAAG,CAAC;IACrC,qBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {StaticSymbol} from '../aot/static_symbol';\n/**\n * Interface that defines how import statements should be generated.\n * @abstract\n */\nexport abstract class ImportResolver {\n/**\n * Converts a file path to a module name that can be used as an `import.\n * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.\n * @abstract\n * @param {?} importedFilePath\n * @param {?} containingFilePath\n * @return {?}\n */\nfileNameToModuleName(importedFilePath: string, containingFilePath: string) {}\n/**\n * Converts the given StaticSymbol into another StaticSymbol that should be used\n * to generate the import from.\n * @abstract\n * @param {?} symbol\n * @return {?}\n */\ngetImportAs(symbol: StaticSymbol) {}\n/**\n * Determine the airty of a type.\n * @abstract\n * @param {?} symbol\n * @return {?}\n */\ngetTypeArity(symbol: StaticSymbol) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}