{"version":3,"file":"summary_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/aot/summary_resolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Summary, SummaryResolver} from '../summary_resolver';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {deserializeSummaries} from './summary_serializer';\nimport {ngfactoryFilePath, stripNgFactory, summaryFileName} from './util';\n\nexport interface AotSummaryResolverHost {\n  /**\n   * Loads an NgModule/Directive/Pipe summary file\n   */\n  loadSummary(filePath: string): string /*|null*/;\n\n  /**\n   * Returns whether a file is a source file or not.\n   */\n  isSourceFile(sourceFilePath: string): boolean;\n  /**\n   * Returns the output file path of a source file.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   */\n  getOutputFileName(sourceFilePath: string): string;\n}\nexport class AotSummaryResolver implements SummaryResolver<StaticSymbol> {\nprivate summaryCache = new Map<StaticSymbol, Summary<StaticSymbol>>();\nprivate loadedFilePaths = new Set<string>();\nprivate importAs = new Map<StaticSymbol, StaticSymbol>();\n/**\n * @param {?} host\n * @param {?} staticSymbolCache\n */\nconstructor(private host: AotSummaryResolverHost,\nprivate staticSymbolCache: StaticSymbolCache) {}\n/**\n * @param {?} filePath\n * @return {?}\n */\nisLibraryFile(filePath: string): boolean {\n    // Note: We need to strip the .ngfactory. file path,\n    // so this method also works for generated files\n    // (for which host.isSourceFile will always return false).\n    return !this.host.isSourceFile(stripNgFactory(filePath));\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\ngetLibraryFileName(filePath: string) { return this.host.getOutputFileName(filePath); }\n/**\n * @param {?} staticSymbol\n * @return {?}\n */\nresolveSummary(staticSymbol: StaticSymbol): Summary<StaticSymbol> {\n    staticSymbol.assertNoMembers();\n    let /** @type {?} */ summary = this.summaryCache.get(staticSymbol);\n    if (!summary) {\n      this._loadSummaryFile(staticSymbol.filePath);\n      summary = this.summaryCache.get(staticSymbol);\n    }\n    return summary;\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\ngetSymbolsOf(filePath: string): StaticSymbol[] {\n    this._loadSummaryFile(filePath);\n    return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\n  }\n/**\n * @param {?} staticSymbol\n * @return {?}\n */\ngetImportAs(staticSymbol: StaticSymbol): StaticSymbol {\n    staticSymbol.assertNoMembers();\n    return this.importAs.get(staticSymbol);\n  }\n/**\n * @param {?} filePath\n * @return {?}\n */\nprivate _loadSummaryFile(filePath: string) {\n    if (this.loadedFilePaths.has(filePath)) {\n      return;\n    }\n    this.loadedFilePaths.add(filePath);\n    if (this.isLibraryFile(filePath)) {\n      const /** @type {?} */ summaryFilePath = summaryFileName(filePath);\n      let /** @type {?} */ json: string;\n      try {\n        json = this.host.loadSummary(summaryFilePath);\n      } catch ( /** @type {?} */e) {\n        console.error(`Error loading summary file ${summaryFilePath}`);\n        throw e;\n      }\n      if (json) {\n        const {summaries, importAs} = deserializeSummaries(this.staticSymbolCache, json);\n        summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\n        importAs.forEach((importAs) => {\n          this.importAs.set(\n              importAs.symbol,\n              this.staticSymbolCache.get(ngfactoryFilePath(filePath), importAs.importAs));\n        });\n      }\n    }\n  }\n}\n\nfunction AotSummaryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nAotSummaryResolver.prototype.summaryCache;\n/** @type {?} */\nAotSummaryResolver.prototype.loadedFilePaths;\n/** @type {?} */\nAotSummaryResolver.prototype.importAs;\n/** @type {?} */\nAotSummaryResolver.prototype.host;\n/** @type {?} */\nAotSummaryResolver.prototype.staticSymbolCache;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}