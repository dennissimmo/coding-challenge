{"version":3,"file":"render_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/render_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SecurityContext} from '@angular/core';\n\nimport {Identifiers, createIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {EMPTY_STATE as EMPTY_ANIMATION_STATE} from '../private_import_core';\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType} from '../template_parser/template_ast';\n\nimport {isFirstViewCheck} from './binding_util';\nimport {ConvertPropertyBindingResult} from './expression_converter';\nimport {createEnumExpression} from './identifier_util';\n/**\n * @param {?} view\n * @param {?} renderElement\n * @param {?} boundProp\n * @param {?} oldValue\n * @param {?} evalResult\n * @param {?=} securityContextExpression\n * @return {?}\n */\nexport function createCheckRenderBindingStmt(\n    view: o.Expression, renderElement: o.Expression, boundProp: BoundElementPropertyAst,\n    oldValue: o.ReadPropExpr, evalResult: ConvertPropertyBindingResult,\n    securityContextExpression?: o.Expression): o.Statement[] {\n  const /** @type {?} */ checkStmts: o.Statement[] = [...evalResult.stmts];\n  const /** @type {?} */ securityContext = calcSecurityContext(boundProp, securityContextExpression);\n  switch (boundProp.type) {\n    case PropertyBindingType.Property:\n      checkStmts.push(o.importExpr(createIdentifier(Identifiers.checkRenderProperty))\n                          .callFn([\n                            view, renderElement, o.literal(boundProp.name), oldValue,\n                            oldValue.set(evalResult.currValExpr),\n                            evalResult.forceUpdate || o.literal(false), securityContext\n                          ])\n                          .toStmt());\n      break;\n    case PropertyBindingType.Attribute:\n      checkStmts.push(o.importExpr(createIdentifier(Identifiers.checkRenderAttribute))\n                          .callFn([\n                            view, renderElement, o.literal(boundProp.name), oldValue,\n                            oldValue.set(evalResult.currValExpr),\n                            evalResult.forceUpdate || o.literal(false), securityContext\n                          ])\n                          .toStmt());\n      break;\n    case PropertyBindingType.Class:\n      checkStmts.push(\n          o.importExpr(createIdentifier(Identifiers.checkRenderClass))\n              .callFn([\n                view, renderElement, o.literal(boundProp.name), oldValue,\n                oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || o.literal(false)\n              ])\n              .toStmt());\n      break;\n    case PropertyBindingType.Style:\n      checkStmts.push(\n          o.importExpr(createIdentifier(Identifiers.checkRenderStyle))\n              .callFn([\n                view, renderElement, o.literal(boundProp.name), o.literal(boundProp.unit), oldValue,\n                oldValue.set(evalResult.currValExpr), evalResult.forceUpdate || o.literal(false),\n                securityContext\n              ])\n              .toStmt());\n      break;\n    case PropertyBindingType.Animation:\n      throw new Error('Illegal state: Should not come here!');\n  }\n  return checkStmts;\n}\n/**\n * @param {?} boundProp\n * @param {?=} securityContextExpression\n * @return {?}\n */\nfunction calcSecurityContext(\n    boundProp: BoundElementPropertyAst, securityContextExpression?: o.Expression): o.Expression {\n  if (boundProp.securityContext === SecurityContext.NONE) {\n    return o.NULL_EXPR;  // No sanitization needed.\n  }\n  if (!boundProp.needsRuntimeSecurityContext) {\n    securityContextExpression =\n        createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);\n  }\n  if (!securityContextExpression) {\n    throw new Error(`internal error, no SecurityContext given ${boundProp.name}`);\n  }\n  return securityContextExpression;\n}\n/**\n * @param {?} view\n * @param {?} componentView\n * @param {?} boundProp\n * @param {?} boundOutputs\n * @param {?} eventListener\n * @param {?} renderElement\n * @param {?} oldValue\n * @param {?} evalResult\n * @return {?}\n */\nexport function createCheckAnimationBindingStmts(\n    view: o.Expression, componentView: o.Expression, boundProp: BoundElementPropertyAst,\n    boundOutputs: BoundEventAst[], eventListener: o.Expression, renderElement: o.Expression,\n    oldValue: o.ReadPropExpr, evalResult: ConvertPropertyBindingResult) {\n  const /** @type {?} */ detachStmts: o.Statement[] = [];\n  const /** @type {?} */ updateStmts: o.Statement[] = [];\n\n  const /** @type {?} */ animationName = boundProp.name;\n\n  const /** @type {?} */ animationFnExpr =\n      componentView.prop('componentType').prop('animations').key(o.literal(animationName));\n\n  // it's important to normalize the void value as `void` explicitly\n  // so that the styles data can be obtained from the stringmap\n  const /** @type {?} */ emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);\n  const /** @type {?} */ animationTransitionVar = o.variable('animationTransition_' + animationName);\n\n  updateStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([\n            view, renderElement, isFirstViewCheck(view).conditional(emptyStateValue, oldValue),\n            evalResult.currValExpr\n          ]))\n          .toDeclStmt());\n  updateStmts.push(oldValue.set(evalResult.currValExpr).toStmt());\n\n  detachStmts.push(animationTransitionVar\n                       .set(animationFnExpr.callFn(\n                           [view, renderElement, evalResult.currValExpr, emptyStateValue]))\n                       .toDeclStmt());\n\n  const /** @type {?} */ registerStmts: o.Statement[] = [];\n  const /** @type {?} */ animationStartMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'start');\n  if (animationStartMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onStart',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])\n            .toStmt());\n  }\n\n  const /** @type {?} */ animationDoneMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'done');\n  if (animationDoneMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onDone',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])\n            .toStmt());\n  }\n\n  updateStmts.push(...registerStmts);\n  detachStmts.push(...registerStmts);\n\n  const /** @type {?} */ checkUpdateStmts: o.Statement[] = [\n    ...evalResult.stmts,\n    new o.IfStmt(\n        o.importExpr(createIdentifier(Identifiers.checkBinding)).callFn([\n          view, oldValue, evalResult.currValExpr, evalResult.forceUpdate || o.literal(false)\n        ]),\n        updateStmts)\n  ];\n  const /** @type {?} */ checkDetachStmts: o.Statement[] = [...evalResult.stmts, ...detachStmts];\n  return {checkUpdateStmts, checkDetachStmts};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}