{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nexport abstract class Serializer {\n/**\n * @abstract\n * @param {?} messages\n * @return {?}\n */\nwrite(messages: i18n.Message[]) {}\n/**\n * @abstract\n * @param {?} content\n * @param {?} url\n * @return {?}\n */\nload(content: string, url: string) {}\n/**\n * @abstract\n * @param {?} message\n * @return {?}\n */\ndigest(message: i18n.Message) {}\n/**\n * @param {?} message\n * @return {?}\n */\ncreateNameMapper(message: i18n.Message): PlaceholderMapper { return null; }\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string;\n\n  toInternalName(publicName: string): string;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\nprivate internalToPublic: {[k: string]: string} = {};\nprivate publicToNextId: {[k: string]: number} = {};\nprivate publicToInternal: {[k: string]: string} = {};\n/**\n * @param {?} message\n * @param {?} mapName\n */\nconstructor(message: i18n.Message,\nprivate mapName: (name: string) => string) {\n    super();\n    message.nodes.forEach(node => node.visit(this));\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\ntoPublicName(internalName: string): string {\n    return this.internalToPublic.hasOwnProperty(internalName) ?\n        this.internalToPublic[internalName] :\n        null;\n  }\n/**\n * @param {?} publicName\n * @return {?}\n */\ntoInternalName(publicName: string): string {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n                                                              null;\n  }\n/**\n * @param {?} text\n * @param {?=} context\n * @return {?}\n */\nvisitText(text: i18n.Text, context?: any): any { return null; }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitPlaceholder(ph: i18n.Placeholder, context?: any): any { this.visitPlaceholderName(ph.name); }\n/**\n * @param {?} ph\n * @param {?=} context\n * @return {?}\n */\nvisitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n/**\n * @param {?} internalName\n * @return {?}\n */\nprivate visitPlaceholderName(internalName: string): void {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let /** @type {?} */ publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const /** @type {?} */ nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\n\nfunction SimplePlaceholderMapper_tsickle_Closure_declarations() {\n/** @type {?} */\nSimplePlaceholderMapper.prototype.internalToPublic;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToNextId;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.publicToInternal;\n/** @type {?} */\nSimplePlaceholderMapper.prototype.mapName;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}